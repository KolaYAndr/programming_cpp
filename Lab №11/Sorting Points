#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm> 

using namespace std;

//создаём класс
class Point
{
	//объявляем функции публичными
public:
    Point(double x, double y) : x(x), y(y) {}

	//функция получения расстояния до центра
	double get_radius()
	{
		return sqrt(x * x + y * y);
	}

	//перегрузка оператора сравнения
	//сравниваем по расстоянию до начала координат
	bool operator<(Point p)
    {
		if (this->get_radius() < p.get_radius()) return true;
		else return false;
    }

	//перегрузка оператора сравнения
	//сравниваем по расстоянию до начала координат
	bool operator>(Point p)
	{
		if (this->get_radius() < p.get_radius()) return false;
		else return true;
	}

	//переопределение функции вывода
	friend std::ostream& operator<< (std::ostream& out, const Point& p)
    {
		out << "(" << p.x << ", " << p.y << ")";
		return out;
    }


	//объявляем поля приватными
private:
	double x, y;
};

int main()
{
	vector<Point> v;
	v.push_back(Point(1, 2));
	v.push_back(Point(10, 12));
	v.push_back(Point(21, 7));
	v.push_back(Point(4, 8));
	sort(v.begin(), v.end()); // требуется перегрузка оператора < для
											   // класса Point
	for (auto& point : v)
		cout << point << '\n'; // требуется перегрузка оператора << для
									// класса Point
	return 0;
}
